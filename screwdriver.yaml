shared:
    image: node:12

jobs:
    main:
        environment:
            SD_SONAR_OPTS: "-Dsonar.sources=index.js,lib -Dsonar.tests=test -Dsonar.javascript.lcov.reportPaths=artifacts/coverage/lcov.info -Dsonar.testExecutionReportPaths=artifacts/report/test.xml"
        requires: [~pr, ~commit]
        steps:
            - install: npm install
            - test: npm test

    publish:
        requires: main
        template: screwdriver-cd/semantic-release
        secrets:
            # Publishing to NPM
            - NPM_TOKEN
            # Pushing tags to Git
            - GH_TOKEN

    docker-trigger:
        requires: publish
        steps:
            - trigger: git clone https://github.com/screwdriver-cd/toolbox.git ci && ./ci/git-latest.sh && DOCKER_TAG=`cat VERSION` ./ci/docker-trigger.sh
        environment:
            # Docker hub repo
            DOCKER_REPO: screwdrivercd/buildcluster-queue-worker
        secrets:
            # Trigger a Docker Hub build
            - DOCKER_TRIGGER

    # Deploy to beta environment
    beta:
        requires: docker-trigger
        steps:
            - setup-ci: git clone https://github.com/screwdriver-cd/toolbox.git ci
            - get-tag: ./ci/git-latest.sh
            - wait-docker: DOCKER_TAG=`cat VERSION` ./ci/docker-wait.sh
            - deploy-k8s: K8S_TAG=`cat VERSION` ./ci/k8s-deploy.sh
            - test: echo Put acceptance tests here
        environment:
            DOCKER_REPO: screwdrivercd/buildcluster-queue-worker
            K8S_CONTAINER: screwdriver-buildcluster-queue-worker
            K8S_IMAGE: screwdrivercd/buildcluster-queue-worker
            K8S_HOST: kubernetes
            K8S_DEPLOYMENT: buildcluster-queue-worker-beta
        secrets:
            # Talking to Kubernetes
            - K8S_TOKEN

    # functional test
    functional-test:
      requires: beta
      image: centos:centos7
      environment:
        PIPELINE_ID: 8188
        INSTANCE: "https://beta.api.screwdriver.cd"
        NAMESPACE: v4
        TIMEOUT: 30
      steps:
        - install_jq: yum install epel-release -y && yum update -y && yum install jq -y && jq -Version
        - trigger_beta_functional_test: |
            TOKEN=$(curl -s -S -m ${TIMEOUT} --fail ${INSTANCE}/${NAMESPACE}/auth/token?api_token=${BETA_FT_ACCESS_TOKEN} | jq -r '.token')
            [[ -z "$TOKEN" ]] && echo "empty Token" && exit 1
            JOB_ID=$(curl -s -S -m ${TIMEOUT} --fail -H 'Accept: application/json' -H "Authorization: Bearer ${TOKEN}" ${INSTANCE}/${NAMESPACE}/pipelines/${PIPELINE_ID}/jobs | jq -r '.[0].id')
            [[ -z "$JOB_ID" ]] && echo "empty Job Id" && exit 1
            BUILD_ID=$(curl -s -S -m ${TIMEOUT} --fail -d "jobId=${JOB_ID}" -H "Content-Type: application/x-www-form-urlencoded" -H "Authorization: Bearer ${TOKEN}" -X POST ${INSTANCE}/${NAMESPACE}/builds | jq -r '.id')
            [[ -z "$BUILD_ID" ]] && echo "empty Build Id" && exit 1
            echo "Build ${BUILD_ID} started, polling status..."
            for attempts in {1..10}; do
              STATUS=$(curl -s -S -m ${TIMEOUT} --fail -H "Authorization: Bearer ${TOKEN}" ${INSTANCE}/${NAMESPACE}/builds/${BUILD_ID} | jq -r '.status')
              if [[ "${STATUS}" == "SUCCESS" ]]; then
                echo "Build ${BUILD_ID} ${STATUS}"
                break
              fi

              if [[ "${STATUS}" == "FAILURE" ]] || [[ "${STATUS}" == "ABORTED" ]]; then
                echo "Build ${BUILD_ID} ${STATUS}"
                break
              fi

              if [[ "${STATUS}" == "RUNNING" ]] || [[ "${STATUS}" == "QUEUED" ]]; then
                echo "Build ${BUILD_ID} ${STATUS}, wait 30s..."
                sleep 30s
              fi
            done
            if [[ "${STATUS}" != "SUCCESS" ]]; then
              echo "Build ${BUILD_ID} monitoring timed out"
              exit 1
            fi
      secrets:
          - BETA_FT_ACCESS_TOKEN

    # Deploy to our prod environment and run tests
    prod:
        requires: functional-test
        steps:
            - setup-ci: git clone https://github.com/screwdriver-cd/toolbox.git ci
            - get-tag: ./ci/git-latest.sh
            - wait-docker: DOCKER_TAG=`cat VERSION` ./ci/docker-wait.sh
            - deploy-k8s: K8S_TAG=`cat VERSION` ./ci/k8s-deploy.sh
            - test: echo Put acceptance tests here
        environment:
            DOCKER_REPO: screwdrivercd/buildcluster-queue-worker
            K8S_CONTAINER: screwdriver-buildcluster-queue-worker
            K8S_IMAGE: screwdrivercd/buildcluster-queue-worker
            K8S_HOST: kubernetes
            K8S_DEPLOYMENT: buildcluster-queue-worker
        secrets:
            # Talking to Kubernetes
            - K8S_TOKEN

    # Deploy to our prod environment and run tests
    prod-bf1:
        requires: functional-test
        steps:
            - setup-ci: git clone https://github.com/screwdriver-cd/toolbox.git ci
            - get-tag: ./ci/git-latest.sh
            - wait-docker: DOCKER_TAG=`cat VERSION` ./ci/docker-wait.sh
            - deploy-k8s: K8S_TAG=`cat VERSION` ./ci/k8s-deploy.sh
            - test: echo Put acceptance tests here
        environment:
            DOCKER_REPO: screwdrivercd/buildcluster-queue-worker
            K8S_CONTAINER: screwdriver-buildcluster-queue-worker
            K8S_IMAGE: screwdrivercd/buildcluster-queue-worker
            K8S_HOST: kubernetes
            K8S_DEPLOYMENT: buildcluster-queue-worker-bf1
        secrets:
            # Talking to Kubernetes
            - K8S_TOKEN

